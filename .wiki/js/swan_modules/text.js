(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["swan_modules/text"],{

/***/ "./node_modules/@onlabsorg/swan-js/lib/modules/text.js":
/*!*************************************************************!*\
  !*** ./node_modules/@onlabsorg/swan-js/lib/modules/text.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n *  text module\n *  ============================================================================\n *  \n *  This module contains functions that operate on the swan Text data type.\n */\n \nmodule.exports = types => {\n    const text = {};\n    \n    const undefined_text = new types.Undefined(\"Text\");\n\n    const isNumber = x => types.wrap(x) instanceof types.Numb;\n    const isString = x => types.wrap(x) instanceof types.Text;\n\n    \n    /**\n     *  text.find: Text s -> Text S -> Numb k\n     *  ------------------------------------------------------------------------\n     *  Takes a string `s` as argument and returns a function `f`. \n     *  If the argument is a tuple, it applies only to its first item.\n     *  \n     *  The returned function `f`: \n     *  - takes a string `S` as argument and returns the first position of `s` \n     *    in `S` or `-1` if `s` is not contained in `S`.\n     *  - returns Undefined Number if the argument of `f` is not a Text item\n     *  - applies only on the first item if the parameter of `f` is a tuple\n     */\n    text.find = s1 => s2 => isString(s1) && isString(s2) ? s2.indexOf(s1) : NaN;\n\n\n    /**\n     *  text.rfind: Text s -> Text S -> Numb k\n     *  ------------------------------------------------------------------------\n     *  Takes a string `s` as argument and returns a function `f`.\n     *  If the argument is a tuple, it applies only to its first item.\n     *  \n     *  The returned function `f`: \n     *  - takes a string `S` as argument and returns the last position of `s` \n     *    in `S` or `-1` if `s` is not contained in `S`.\n     *  - returns Undefined Number if the argument of `f` is not a Text item\n     *  - applies only on the first item if the parameter of `f` is a tuple\n     */\n    text.rfind = s1 => s2 => isString(s1) && isString(s2) ? s2.lastIndexOf(s1) : NaN;\n    \n\n    /**\n     *  text.lower: Text S -> Text s\n     *  ------------------------------------------------------------------------\n     *  Returns the passed string in lower-case. \n     *  If the argument is not a Text item, this functions return Undefined text.\n     *  If the parameter is a tuple, this function applies to its first item only.\n     */\n    text.lower = str => isString(str) ? str.toLowerCase() : undefined_text;\n    \n\n    /**\n     *  text.upper: Text s -> Text S\n     *  ------------------------------------------------------------------------\n     *  Returns the passed string in upper-case. \n     *  If the argument is not a Text item, this functions return Undefined text.\n     *  If the parameter is a tuple, this function applies to its first item only.\n     */\n    text.upper = str => isString(str) ? str.toUpperCase() : undefined_text;\n    \n    \n    /**\n     *  text.trim: Text S -> Text s\n     *  ------------------------------------------------------------------------\n     *  Removed the leading and trailing spaces from the given string.\n     *  If the argument is not a Text item, this functions return Undefined text.\n     *  If the parameter is a tuple, this function applies to its first item only.\n     */\n    text.trim = s => isString(s) ? s.trim() : undefined_text;\n\n\n    /**\n     *  text.trim_head: Text S -> Text s\n     *  ------------------------------------------------------------------------\n     *  Removed the leading spaces from the given string.\n     *  If the argument is not a Text item, this functions return Undefined text.\n     *  If the parameter is a tuple, this function applies to its first item only.\n     */\n    text.trim_head = s => isString(s) ? s.trimStart() : undefined_text;\n\n\n    /**\n     *  text.trim_tail: Text S -> Text s\n     *  ------------------------------------------------------------------------\n     *  Removed the trailing spaces from the given string.\n     *  If the argument is not a Text item, this functions return Undefined text.\n     *  If the parameter is a tuple, this function applies to its first item only.\n     */\n    text.trim_tail = s => isString(s) ? s.trimEnd() : undefined_text;\n    \n\n    /**\n     *  text.head: Numb n -> Text S -> Text s\n     *  ------------------------------------------------------------------------\n     *  Takes a number `n` as argument and returns a function `f`.\n     *  If the argument is a tuple, it applies only to its first item.\n     *  \n     *  The returned function `f`: \n     *  - takes a string `s` as argument and returns the substring at the \n     *    left-side of the n-th character. If n is negative, the character \n     *    position is computed as relative to the end of `L`.\n     *  - returns Undefined Text if the argument of `f` is not a Text item\n     *  - applies only on the first item if the parameter of `f` is a tuple\n     */\n    text.head = n => s => isNumber(n) && isString(s) ? s.slice(0,n) : undefined_text;\n    \n\n    /**\n     *  text.tail: Numb n -> Text S -> Text s\n     *  ------------------------------------------------------------------------\n     *  Takes a number `n` as argument and returns a function `f`.\n     *  If the argument is a tuple, it applies only to its first item.\n     *  \n     *  The returned function `f`: \n     *  - takes a string `s` as argument and returns the substring at the \n     *    right-side of the n-th character (including the latter). If n is \n     *    negative, the character position is computed as relative to the \n     *    end of `S`.\n     *  - returns Undefined Text if the argument of `f` is not a Text item\n     *  - applies only on the first item if the parameter of `f` is a tuple\n     */\n    text.tail = n => s => isNumber(n) && isString(s) ? s.slice(n) : undefined_text;\n\n\n    /**\n     *  text.split: Text s -> Text S -> List l\n     *  ------------------------------------------------------------------------\n     *  Takes a string `s` as argument and returns a function `f`.\n     *  If the argument is a tuple, it applies only to its first item.\n     *  \n     *  The returned function `f`: \n     *  - takes a string `S` as argument and returns the list of substring \n     *    separated by s. For example, if the divider is `s=\":\"` and the string \n     *    is `S=\"a:b:c\"`, the function `f` returns `[\"a\",\"b\",\"c\"]`.\n     *  - returns Undefined Text if the argument of `f` is not a Text item\n     *  - applies only on the first item if the parameter of `f` is a tuple\n     */\n    text.split = s1 => s2 => isString(s1) && isString(s2) ? s2.split(s1) : undefined_text; \n    \n    \n    return text;   \n}\n\n\n//# sourceURL=webpack:///./node_modules/@onlabsorg/swan-js/lib/modules/text.js?");

/***/ })

}]);