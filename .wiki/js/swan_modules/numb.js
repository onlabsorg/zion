(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["swan_modules/numb"],{

/***/ "./node_modules/@onlabsorg/swan-js/lib/modules/numb.js":
/*!*************************************************************!*\
  !*** ./node_modules/@onlabsorg/swan-js/lib/modules/numb.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n *  numb module\n *  ============================================================================\n *  \n *  This module contains functions and constants that operate on the swan Numb\n *  data type.\n *  \n *  Unless specified otherwise, all the functions of this library assume that\n *  their parameter is an item (1-d tuple). If more that one item is passed\n *  to a function, only the first item will be used and the others will be\n *  ignored.\n */\n\nmodule.exports = types => {\n    const numb = {};\n    \n    const isNumb = x => types.wrap(x) instanceof types.Numb;\n    const isText = x => types.wrap(x) instanceof types.Text;\n\n\n    /**\n     *  Math constants\n     *  ------------------------------------------------------------------------\n     *  The following constants are defined:\n     *  \n     *  - `numb.INFINITY`: Infinity.\n     *  - `numb.PI`: Ratio of the a circle's circumference to its diameter, approximately 3.14159.\n     *  - `numb.E`: Euler's constant and the base of natural logarithms, approximately 2.718.\n     */\n    numb.INFINITY = Infinity;\n    numb.PI = Math.PI;\n    numb.E = Math.E;\n\n\n    /**\n     *  numb.parse: Text s -> Numb n\n     *  ------------------------------------------------------------------------\n     *  Converts a string to a number. It accepts also binary (0b...), octal\n     *  (0o...) and exadecimal (0x...) string representations of numbers.\n     *  If the argument is not a valid string, this function returns Undefined Number.\n     */\n    numb.parse = s => isText(s) ? Number(s) : NaN;\n    \n    \n    /**\n     *  Trigonometric functions\n     *  ------------------------------------------------------------------------\n     *  The Numb namespace contains the following trigonometric functions: \n     *  \n     *  - `numb.cos`:  Returns the cosine of a number.\n     *  - `numb.sin`:  Returns the sine of a number.\n     *  - `numb.tan`:  Returns the tangent of a number.\n     *  - `numb.acos`: Returns the arccosine of a number.\n     *  - `numb.asin`: Returns the arcsine of a number.\n     *  - `numb.atan`: Returns the arctangent of a number.\n     *  \n     *  If the argument is not a number, these functions return Undefined Number.\n     */\n    numb.cos  = x => isNumb(x) ? Math.cos(x)  : NaN;\n    numb.sin  = x => isNumb(x) ? Math.sin(x)  : NaN;\n    numb.tan  = x => isNumb(x) ? Math.tan(x)  : NaN;\n    numb.acos = x => isNumb(x) ? Math.acos(x) : NaN;\n    numb.asin = x => isNumb(x) ? Math.asin(x) : NaN;\n    numb.atan = x => isNumb(x) ? Math.atan(x) : NaN;\n\n    \n    /**\n     *  Hyperbolic functions\n     *  ------------------------------------------------------------------------\n     *  The Numb namespace contains the following hyperbolic functions: \n     *  \n     *  - `numb.cosh`:  Returns the hyperbolic cosine of a number.\n     *  - `numb.sinh`:  Returns the hyperbolic sine of a number.\n     *  - `numb.tanh`:  Returns the hyperbolic tangent of a number.\n     *  - `numb.acosh`: Returns the hyperbolic arccosine of a number.\n     *  - `numb.asinh`: Returns the hyperbolic arcsine of a number.\n     *  - `numb.atanh`: Returns the hyperbolic arctangent of a number.\n     *  \n     *  If the argument is not a number, these functions return Undefined Number.\n     */\n    numb.cosh  = x => isNumb(x) ? Math.cosh(x)  : NaN;\n    numb.sinh  = x => isNumb(x) ? Math.sinh(x)  : NaN;\n    numb.tanh  = x => isNumb(x) ? Math.tanh(x)  : NaN;\n    numb.acosh = x => isNumb(x) ? Math.acosh(x) : NaN;\n    numb.asinh = x => isNumb(x) ? Math.asinh(x) : NaN;\n    numb.atanh = x => isNumb(x) ? Math.atanh(x) : NaN;\n    \n    \n    /**\n     *  Rounding\n     *  ------------------------------------------------------------------------\n     *  The following functions perform number rounding. \n     *  \n     *  - `Math.ceil`: Returns the smallest integer greater than or equal to a number.\n     *  - `Math.floor`: Returns the largest integer less than or equal to a number.\n     *  - `Math.trunc`: Returns the integer part of the number x, removing any fractional digits.\n     *  - `Math.round`: Returns the value of a number rounded to the nearest integer.\n     *  \n     *  If the argument is not a number, these functions return Undefined Number.\n     */\n    numb.ceil  = x => isNumb(x) ? Math.ceil(x)  : NaN;\n    numb.floor = x => isNumb(x) ? Math.floor(x) : NaN;\n    numb.trunc = x => isNumb(x) ? Math.trunc(x) : NaN;\n    numb.round = x => isNumb(x) ? Math.round(x) : NaN;\n    \n\n    /**\n     *  numb.abs - function\n     *  ------------------------------------------------------------------------\n     *  Returns the absolute value of a number. \n     *  If the argument is not a number, this functions return Undefined Number.\n     */\n    numb.abs = x => isNumb(x) ? Math.abs(x) : NaN;\n\n\n    /**\n     *  numb.exp - function\n     *  ------------------------------------------------------------------------\n     *  Returns E^x, where x is the argument, and E is Euler's constant. \n     *  If the argument is not a number, this functions return Undefined Number.\n     */\n    numb.exp = x => isNumb(x) ? Math.exp(x) : NaN;\n    \n    \n    /**\n     *  numb.log - function\n     *  ------------------------------------------------------------------------\n     *  Returns the natural logarithm of a number. \n     *  If the argument is not a number, this functions return Undefined Number.\n     */\n    numb.log = x => isNumb(x) ? Math.log(x) : NaN;\n    \n    \n    /**\n     *  numb.log10 - function\n     *  ------------------------------------------------------------------------\n     *  Returns the base 10 logarithm of a number. \n     *  If the argument is not a number, this functions return Undefined Number.\n     */\n    numb.log10 = x => isNumb(x) ? Math.log10(x) : NaN;\n    \n    \n    /**\n     *  numb.max - function\n     *  ------------------------------------------------------------------------\n     *  Returns the largest of zero or more numbers.\n     *  If any argument is not a number, this functions return Undefined Number.\n     */\n    numb.max = Math.max;\n\n\n    /**\n     *  numb.min - function\n     *  ------------------------------------------------------------------------\n     *  Returns the smallest of zero or more numbers.\n     *  If any argument is not a number, this functions return Undefined Number.\n     */\n    numb.min = Math.min;\n    \n\n    /**\n     *  numb.random - function\n     *  ------------------------------------------------------------------------\n     *  Returns a pseudo-random number between 0 and the given argument.\n     *  If the argument is not a number, this functions return Undefined Number.\n     */\n    numb.random = x => isNumb(x) ? Math.random()*x : NaN;\n\n\n    /**\n     *  numb.sqrt - function\n     *  ------------------------------------------------------------------------\n     *  Returns the positive square root of a number.\n     *  If any argument is not a number, this functions return Undefined Number.\n     */\n    numb.sqrt = x => isNumb(x) ? Math.sqrt(x) : NaN;\n    \n    \n    return numb;  \n}\n\n\n\n//# sourceURL=webpack:///./node_modules/@onlabsorg/swan-js/lib/modules/numb.js?");

/***/ })

}]);